name: CI Quality Gate PR

on:
  workflow_call:
    secrets:
      MINIO_BUCKET_NAME:
        required: false
      MINIO_REGION:
        required: false
      MINIO_ENDPOINT:
        required: false
      MINIO_ACCESS_KEY_ID:
        required: false
      MINIO_SECRET_ACCESS_KEY:
        required: false

env:
  LLM_MODEL_URL: https://delta.jan.ai/tinyllama-1.1b-chat-v0.3.Q2_K.gguf
  EMBEDDING_MODEL_URL: https://catalog.jan.ai/dist/models/embeds/nomic-embed-text-v1.5.f16.gguf

jobs:
  build-and-test:
    runs-on: ${{ matrix.runs-on }}
    if: ${{ ! startsWith(github.head_ref, 'update-submodule') }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # - os: "linux"
          #   name: "amd64-avx2"
          #   runs-on: "ubuntu-20-04"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: true
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx"
          #   runs-on: "ubuntu-20-04"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx512"
          #   runs-on: "ubuntu-20-04"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-vulkan"
          #   runs-on: "ubuntu-20-04-cuda-11-7"
          #   cmake-flags: "-DLLAMA_VULKAN=ON -DLLAMA_NATIVE=OFF -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: true
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx2-cuda-11-7"
          #   runs-on: "ubuntu-20-04-cuda-11-7"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx-cuda-11-7"
          #   runs-on: "ubuntu-20-04-cuda-11-7"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx512-cuda-11-7"
          #   runs-on: "ubuntu-20-04-cuda-11-7"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx2-cuda-12-0"
          #   runs-on: "ubuntu-20-04-cuda-12-0"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx-cuda-12-0"
          #   runs-on: "ubuntu-20-04-cuda-12-0"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "linux"
          #   name: "amd64-avx512-cuda-12-0"
          #   runs-on: "ubuntu-20-04-cuda-12-0"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DLLAMA_CUDA=ON -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_BUILD_TYPE='Release' -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: "/tmp/sccache.conf"
          # - os: "mac"
          #   name: "amd64"
          #   runs-on: "macos-13"
          #   cmake-flags: "-DLLAMA_METAL=OFF"
          #   run-e2e: true
          #   vulkan: false
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "mac"
          #   name: "arm64"
          #   runs-on: "macos-silicon"
          #   cmake-flags: "-DLLAMA_METAL_EMBED_LIBRARY=ON"
          #   run-e2e: true
          #   vulkan: false
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "windows"
          #   name: "amd64-avx2"
          #   runs-on: "windows-2019"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_BLAS=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -GNinja"
          #   run-e2e: true
          #   vulkan: false
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "windows"
          #   name: "amd64-avx"
          #   runs-on: "windows-2019"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_BLAS=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -GNinja"
          #   run-e2e: true
          #   vulkan: false
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "windows"
          #   name: "amd64-avx512"
          #   runs-on: "windows-2019"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_BLAS=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "windows"
          #   name: "amd64-vulkan"
          #   runs-on: "windows-2019"
          #   cmake-flags: "-DLLAMA_VULKAN=ON -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -GNinja"
          #   run-e2e: false
          #   vulkan: true
          #   sccache: false
          #   sccache-conf-path: ""
          # - os: "windows"
          #   name: "amd64-avx2-cuda-12-0"
          #   runs-on: "windows-cuda-12-0"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          # - os: "windows"
          #   name: "amd64-avx-cuda-12-0"
          #   runs-on: "windows-cuda-12-0"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          # - os: "windows"
          #   name: "amd64-avx512-cuda-12-0"
          #   runs-on: "windows-cuda-12-0"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          # - os: "windows"
          #   name: "amd64-avx2-cuda-11-7"
          #   runs-on: "windows-cuda-11-7"
          #   cmake-flags: "-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          # - os: "windows"
          #   name: "amd64-avx-cuda-11-7"
          #   runs-on: "windows-cuda-11-7"
          #   cmake-flags: "-DLLAMA_AVX2=OFF -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          # - os: "windows"
          #   name: "amd64-avx512-cuda-11-7"
          #   runs-on: "windows-cuda-11-7"
          #   cmake-flags: "-DLLAMA_AVX512=ON -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DLLAMA_CUDA=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE='Release' -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CUDA_COMPILER_LAUNCHER=sccache -GNinja"
          #   run-e2e: false
          #   vulkan: false
          #   sccache: true
          #   sccache-conf-path: 'C:\sccache.conf'
          - os: "windows"
            name: "amd64-avx2-rocm"
            runs-on: "windows-2019" # windows-amd
            cmake-flags: -DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=OFF -DGGML_HIPBLAS=ON -DCMAKE_C_COMPILER="${env:HIP_PATH}\bin\clang.exe" -DCMAKE_CXX_COMPILER="${env:HIP_PATH}\bin\clang++.exe"
            run-e2e: false
            vulkan: false
            rocm: true
            sccache: false
            sccache-conf-path: ""   
          # - os: "linux"
          #   name: "amd64-avx2-rocm"
          #   runs-on: "linux-amd-rocm-6"
          #   cmake-flags: '-DLLAMA_NATIVE=OFF -DLLAMA_BUILD_SERVER=ON -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_HIP_COMPILER="$(hipconfig -l)/clang" -DGGML_HIPBLAS=ON'
          #   run-e2e: false
          #   vulkan: false
          #   rocm: true
          #   sccache: false
          #   sccache-conf-path: ""

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Prepare Vulkan SDK
        if: ${{ matrix.vulkan }}
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.275.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: create sccache.conf
        if: ${{ matrix.sccache }}
        run: |
          echo "[cache.s3]" > ${{ matrix.sccache-conf-path }}
          echo 'bucket = "${{ secrets.MINIO_BUCKET_NAME }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'endpoint = "${{ secrets.MINIO_ENDPOINT }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'key_prefix = "${{ matrix.os }}-${{ matrix.name }}"' >> ${{ matrix.sccache-conf-path }}
          echo 'use_ssl = false' >> ${{ matrix.sccache-conf-path }}
          echo 'server_side_encryption = false' >> ${{ matrix.sccache-conf-path }}
          echo 'no_credentials = false' >> ${{ matrix.sccache-conf-path }}

      - name: Install HIP SDK and ROCM - Windows
        if: ${{ matrix.rocm && matrix.os == 'Windows' }}
        run: |
          $ErrorActionPreference = "Stop"
          write-host "Downloading AMD HIP SDK Installer"
          Invoke-WebRequest -Uri "https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-23.Q4-WinSvr2022-For-HIP.exe" -OutFile "${env:RUNNER_TEMP}\rocm-install.exe"
          write-host "Installing AMD HIP SDK"
          Start-Process "${env:RUNNER_TEMP}\rocm-install.exe" -ArgumentList '-install' -NoNewWindow -Wait
          write-host "Completed AMD HIP SDK installation"

          & 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' --version

          $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
          $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"

          echo "HIP_PATH=${env:HIP_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "CMAKE_PREFIX_PATH=${env:CMAKE_PREFIX_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "GPU_TARGETS=gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1030 gfx1100 gfx1101 gfx1102" | Out-File -FilePath $env:GITHUB_ENV -Append
  
      - name: Install HIP SDK and ROCM - Linux
        if: ${{ matrix.rocm && matrix.os == 'Linux' }}
        run: |
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee /etc/apt/sources.list.d/jammy-copies.list
          wget https://repo.radeon.com/amdgpu-install/6.1.2/ubuntu/focal/amdgpu-install_6.1.60102-1_all.deb
          sudo apt install ./amdgpu-install_6.1.60102-1_all.deb -y
          sudo apt update -y
          sudo apt install amdgpu-dkms rocm build-essential rocblas-dev hipblas-dev -y

          # Set nvcc architecture
          echo "GPU_TARGETS=gfx803 gfx900 gfx906 gfx908 gfx90a gfx1010 gfx1030 gfx1100 gfx1101 gfx1102" >> $GITHUB_ENV
          echo "CC=/opt/rocm/llvm/bin/clang" >> $GITHUB_ENV
          echo "CXX=/opt/rocm/llvm/bin/clang++" >> $GITHUB_ENV

      - name: Install choco on Windows
        if: runner.os == 'Windows'
        run: |
          choco install make sccache ninja -y

      - name: Install ninja build on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt install ninja-build -y

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: start scache server
        if: ${{ matrix.sccache }}
        run: |
          sccache --start-server
        env:
          SCCACHE_BUCKET: "${{ secrets.MINIO_BUCKET_NAME }}"
          SCCACHE_REGION: "${{ secrets.MINIO_REGION }}"
          SCCACHE_ENDPOINT: "${{ secrets.MINIO_ENDPOINT }}"
          SCCACHE_S3_USE_SSL: "false"
          SCCACHE_S3_SERVER_SIDE_ENCRYPTION: "false"
          SCCACHE_S3_KEY_PREFIX: "${{ matrix.os }}-${{ matrix.name }}"
          SCCACHE_LOG: "debug"
          SCCACHE_CONF: '${{ matrix.sccache-conf-path }}'
          AWS_ACCESS_KEY_ID: "${{ secrets.MINIO_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.MINIO_SECRET_ACCESS_KEY }}"
          SCCACHE_IDLE_TIMEOUT: "0"

      - name: Build - ROCM - Windows
        if: ${{ matrix.rocm && matrix.os == 'Windows' }}
        run: |
          $env:HIP_PATH=$(Resolve-Path 'C:\Program Files\AMD\ROCm\*\bin\clang.exe' | split-path | split-path)
          $env:CMAKE_PREFIX_PATH="${env:HIP_PATH}"
          make build-example-server CMAKE_EXTRA_FLAGS='${{ matrix.cmake-flags }}'

      - name: Build
        if: ${{ !matrix.rocm }}
        run: |
          make build-example-server CMAKE_EXTRA_FLAGS="${{ matrix.cmake-flags }}"

      - name: Pre Package
        run: |
          make pre-package

      - name: Package
        run: |
          make package

      - name: Run e2e testing
        if: ${{ matrix.run-e2e }}
        run: |
          make run-e2e-test LLM_MODEL_URL=${{ env.LLM_MODEL_URL }} EMBEDDING_MODEL_URL=${{ env.EMBEDDING_MODEL_URL }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: cortex.llamacpp-${{ matrix.os }}-${{ matrix.name }}
          path: ./cortex.llamacpp

      - name: Clean
        if: always()
        continue-on-error: true
        run: |
          sccache --stop-server
          rm ${{ matrix.sccache-conf-path }}